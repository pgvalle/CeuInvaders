data :ShotData = [pos :XY, dy]

task Shot(pos :XY, dy) {
    set pub = pos ;; for collision check

    var should-explode = true
    val exposion-img = match dy {
        <= 0 => IMG-EXP2
        else => IMG-EXP3
    }

    par-or {
        await :Collision.Shot {
            set should-explode = it.should-explode
        }
    } with {
        every :Pico.Draw {
            pico.set.color.draw(WHITE)
            pico.output.draw.rect([pos, [1, 7]])
        }
    } with {
        watching | out-of-bounds() {
            every :Pico.Frame {
                set pos.y = pos.y + dy
            }
        } where {
            val out-of-bounds = func () {
                ifs {
                    pos.y <= 10  => true
                    pos.y >= 240 => true
                    else         => false
                }
            }
        }
    }

    if should-explode {
        watching <0.3:s> {
            every :Pico.Draw {
                pico.set.image.crop(nil)
                pico.output.draw.image([pos.x - 3, pos.y], exposion-img)
            }
        }
    }

    
}
