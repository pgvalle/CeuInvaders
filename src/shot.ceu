task Shot(pos :XY, dy) {
    spawn {
        val e = watching :Collision.Shot {
            every :Pico.Draw { ;; draw shot
                pico.set.color.draw(WHITE)
                pico.output.draw.rect([pos, [1, 7]])
            }
        }

        if e.should-explode {
            every :Pico.Draw { ;; draw shot explosion
                pico.set.image.crop(nil)
                pico.output.draw.image([pos.x - 3, pos.y], match dy {
                    <= 0 => IMG-EXP2
                    else => IMG-EXP3
                })
            }
        }
    }

    toggle :Show { ;; shot state depends on pause state
        watching :Collision.Shot {
            watching | (pos.y <= 33) or (pos.y >= 240) { ;; until it's out of bounds
                every :Pico.Frame {
                    set pos.y = pos.y + dy
                }
            }

            set pos.y = math.between(33, pos.y, 240)
        }

        await(<EXPLOSION-TIME:s>) ;; collided or out of bounds
    }
}
