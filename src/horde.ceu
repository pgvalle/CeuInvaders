enum :InvaderState { Dead, Up, Down }
data :Invader = [pos :XY, tp, state]

var invaders = #[]
val horde-shot = tasks(1)

task Horde() {
    ;; draw invaders regardless of horde state
    spawn {
        every :Pico.Draw {
            loop inv :Invader in invaders {
                ;; match type to correct image and rectangle size
                val [crop-wh, img] = match inv.tp {
                    0 => [[ 8, 8], IMG-INV1]
                    1 => [[11, 8], IMG-INV2]
                    2 => [[12, 8], IMG-INV3]
                }

                ;; match state to correct movement animation frame
                val crop-xy = match inv.state {
                    :InvaderState.Dn => [0, 0]
                    :InvaderState.Up => [crop-wh[0], 0]
                }

                ;; crop-xy == nil means invader dead so don't render
                if crop-xy {
                    pico.set.image.crop([crop-xy, crop-wh])
                    pico.output.draw.image(inv.pos, img)
                }
            }
        }
    }

    ;; populating horde. Add one invader each frame
    loop i in {0 => 55{ {
        val col = i % 11
        val row = 4 - math.floor(i / 11)
        val x = 26 + (16 * col)
        val y = 64 + (16 * row)

        val [pos :XY, tp] = match row {
            0 => [[x + 2, y], 0]
            1 => [[x + 2, y], 0]
            2 => [[x, y], 1]
            3 => [[x, y], 1]
            4 => [[x, y], 2]
        }
        set invaders[+] = [pos, tp, :InvaderState.Dn]
    
        await(:Pico.Frame)
    }

    ;; moving and shooting. Move one invader at a time
    par {
        var dx = 2

        loop {
            var dy = 0

            ;; check if it's time to turn when all invaders are up-to-date
            loop inv :Invader in invaders {
                if (inv.pos.x < 12) or (inv.pos.x > 200) {
                    set dx = -dx ;; flip
                    set dy = 8   ;; also move down while turning
                    break()
                }
            }

            par-or {
                ;; update one invader every frame
                loop inv :Invader in invaders {
                    if inv.state /= :InvaderState.Dead {
                        set inv.pos = [inv.pos.x + dx, inv.pos.y + dy]
                        set inv.state = match inv.state {
                            ;; animate invaders
                            :InvaderState.Up => :InvaderState.Dn
                            :InvaderState.Dn => :InvaderState.Up
                        }

                        await(:Pico.Frame)
                    }
                }
            } with {
                await :Collision.Horde {
                    val i = it.invader-index
                    val invader :Invader = invaders[i]
                    val pos :XY = invader.pos
                    set invader.state = :InvaderState.Dead
                    ;;set pos.x = pos.x - 1
                    await spawn Explosion(pos, 0.3, IMG-EXP1)
                }
            }
        }
    } with {
        await <2:s>
        every :Pico.Frame {
            spawn Shot([60, 60], 6) in horde-shot
        }
    }
}
