enum :InvaderState { Dead, Up, Down }
data :Invader = [pos :XY, type, state]

val horde_shot = tasks(1)

task Horde() {
    var invaders = #[]
    set pub = invaders

    ;; draw invaders regardless of horde state
    spawn {
        every :Pico.Draw {
            loop inv :Invader in invaders {
                ;; match type to correct image and rectangle size
                val [crop_wh, img] = match inv.type {
                    0 => [[ 8, 8], IMG_INV1]
                    1 => [[11, 8], IMG_INV2]
                    2 => [[12, 8], IMG_INV3]
                }

                ;; match state to correct movement animation frame
                val crop_xy = match inv.state {
                    :InvaderState.Dn => [0, 0]
                    :InvaderState.Up => [crop_wh[0], 0]
                }

                ;; crop_xy == nil means invader dead so don't render
                if crop_xy {
                    pico.set.image.crop([crop_xy, crop_wh])
                    pico.output.draw.image(inv.pos, img)
                }
            }
        }
    }

    ;; populating horde. Add one invader each frame
    loop i in {0 => 55{ {
        val row = 4 - math.floor(i / 11)
        val col = i % 11

        val pos = [26 + (16 * col), 64 + (16 * row)]
        val type = match row {
            0 => 0
            1 => 0
            2 => 1
            3 => 1
            4 => 2
        }
        set invaders[+] = [pos, type, :InvaderState.Dn]
    
        await(:Pico.Frame)
    }

    ;; moving and shooting. Move one invader at a time
    par {
        var dx = 2

        loop {
            var dy = 0

            ;; check if it's time to turn when all invaders are up-to-date
            loop inv :Invader in invaders {
                if (inv.pos.x < 12) or (inv.pos.x > 200) {
                    set dx = -dx ;; flip
                    set dy = 8   ;; also move down while turning
                    break()
                }
            }

            par-or {
                await(:collided)

                ;; val i = it.i
                ;; val pos = invaders[i].pos
                ;; set invaders[i].state = :InvaderState.Dead
                ;; set pos.x = pos.x - 1
                ;; await spawn Explosion(pos, 0.3, IMG_EXP1)
            } with {
                ;; update one invader every frame
                loop inv :Invader in invaders {
                    await(:Pico.Frame)

                    set inv.pos = [inv.pos.x + dx, inv.pos.y + dy]
                    set inv.state = match inv.state {
                        ;; animate invaders
                        :InvaderState.Up => :InvaderState.Dn
                        :InvaderState.Dn => :InvaderState.Up
                        ;; dead invaders remain dead
                        :InvaderState.Dead => :InvaderState.Dead
                    }
                }
            }
        }
    } with {
        await <2:s>
        every :Pico.Frame {
            spawn Shot([60, 60], 6) in horde_shot
        }
    }
}
