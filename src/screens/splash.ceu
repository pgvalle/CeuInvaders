do {
    val STRINGS = #[
        " PLAY",
        " SPACE INVADERS",
        " *SCORE ADVANCES TABLE*",
        " =? MYSTERY",
        " =30 POINTS",
        " =20 POINTS",
        " =10 POINTS",
        " "
    ]
    val X-OFFS = #[72, 32, 0, 56, 56, 56, 56, 0]
    val Y-OFFS = #[0, 24, 56, 72, 88, 104, 120, 0]

    var i = 0
    var j = 1

    par-or {
        every :Pico.Draw {
            loop k in {0 => i{ { ;; strings that were entirely typewritten until now
                val ipos = [16 + X-OFFS[k], 64 + Y-OFFS[k]]
                pico.output.draw.text(ipos, STRINGS[k])
            }

            ;; calculate typewrite state of STRINGS[i]
            var str = ""
            loop l in {0 => j{ {
                set str[+] = STRINGS[i][l]
            }

            ;; show typewrite state of STRINGS[i]
            val pos = [16 + X-OFFS[i], 64 + Y-OFFS[i]]
            pico.output.draw.text(pos, str)

            if i >= 3 { ;; if showing score table, then render invader images as well
                pico.set.image.crop([[0, 0], [24, 8]]);
                pico.output.draw.image([59, 136], IMG-UFO);
                pico.set.image.crop([[0, 0], [8, 8]]);
                pico.output.draw.image([67, 152], IMG-INV1);
                pico.set.image.crop([[0, 0], [11, 8]]);
                pico.output.draw.image([66, 168], IMG-INV2);
                pico.set.image.crop([[0, 0], [12, 8]]);
                pico.output.draw.image([65, 184], IMG-INV3);
            }
        }
    } with {
        ;; when the key is pressed, skip typewriting text
        watching :Pico.Key.Dn | it.key == :Key-Up {
            await(<1.5:s>)

            loop { ;; for each string in STRINGS
                if i == 2 { ;; wait a little before showing score table
                    await(<1.5:s>)
                    set i = 3
                }

                loop { ;; typewrite each character of STRINGS[i]
                    await(<50:ms>)
                    set j = j + 1
                    until j == #STRINGS[i]
                }

                set j = 1
                set i = i + 1
                until i == (#STRINGS - 1)
            }
        }

        set j = 1
        set i = #STRINGS - 1
        await(:Pico.Key.Dn | it.key == :Key-Up)
    }
}

^["src/screens/game.ceu"]

;;}}}}
