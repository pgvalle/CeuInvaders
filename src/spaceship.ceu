val spaceship-shot = tasks(1)

task Spaceship () {
    var x = 16
    var l = 0
    var r = 0
    var crop-xy = [0, 0]

    await(<2:s>) ;; being deployed

    spawn { ;; render spaceship
        every :Pico.Draw {
            pico.set.image.crop([crop-xy, [16, 8]])
            pico.output.draw.image([x, 216], IMG-SPACESHIP)
        }
    }
    
    watching :Collision.Spaceship { ;; deployed
        par-or {
            every :Pico.Key.Dn {
                match it.key {
                    :Key-Left => set l = 4
                    :Key-Right => set r = 4
                    ;;:Key-Q => spawn Shot([x + 8, 208], -8) in spaceship-shot
                    ;; testing some stuff
                    ;; :Key-T => broadcast(:aaaa) in :global
                }
            }
        } with {
            every :Pico.Key.Up {
                match it.key {
                    :Key-Left => set l = 0
                    :Key-Right => set r = 0
                }
            }
        } with {
            every :Pico.Frame {
                set x = x + (r - l)
            }
        }
    }

    watching <1.5:s> { ;; exploding state
        loop {
            set crop-xy = [16, 0]
            await <0.1:s>
            set crop-xy = [32, 0]
            await <0.1:s>
        }
    }
}
