data :UFO-Destroyed = [score]

val UFO-Y = 40
val UFO-CROP-WH :WH = [24, 8]   

task UFO() {
    ;; deside if it spawns at right and goes left or the oposite
    val l-or-r = random.int(0, 1)
    var x = match l-or-r {
        0 => 20
        1 => 200
    }
    var dx = match l-or-r {
        0 => 5
        1 => -5
    }

    ;; expose rect for collision detection
    set pub = [[x + 4, UFO-Y], [16, 8]]

    ;; time to spawn
    val tts = random.int(8, 12)
    await(<tts:s>)

    var collided = true

    ;; Spawned. Move around until get hit or until being out-of-bounds
    watching :Collision.UFO {
        par-or {
            every :Pico.Frame {
                set x = x + dx
                set pub = [[x + 4, UFO-Y], [16, 8]] ;; update public rect

                if (x <= 10) or (x >= 210) {
                    set collided = false
                    break()
                }               
            }
        } with {
            every :Pico.Draw {
                pico.set.image.crop([[0, 0], UFO-CROP-WH])
                pico.output.draw.image([x, UFO-Y], IMG-UFO)
            }
        }
    }

    if collided {
        ;; Render UFO Explosion
        await spawn Explosion([x, UFO-Y], 1.5, IMG-UFO, [[24, 0], UFO-CROP-WH])

        ;; Broadcast that UFO was destroyed
        val score = 100 * random.int(1, 3)
        broadcast(:UFO-Destroyed [score]) in :global ;; todo: avoid using global

        ;; Render UFO score value for 1 sec
        watching <1.5:s> {
            every :Pico.Draw {
                pico.output.draw.text([x, UFO-Y], to.string(score))
            }
        }
    }
}